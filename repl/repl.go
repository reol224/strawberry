package repl

import (
	"bufio"
	"fmt"
	"io"
	"strawberryInterpreter/lexer"
	"strawberryInterpreter/parser"
)

const PROMPT = ">> "
const STRAWBERRY_ASCII_ART = `
  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⢶⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡟⠀⠀⣸⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠁⠀⣰⡿⠁⠀⠀⠀⣀⣀⣤⣤⣤⣶⡶⠿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡏⠀⢠⣿⠁⣠⣴⠾⠟⠋⠉⠉⠉⠀⠀⠀⣰⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⣾⣷⡿⠋⠁⠀⠀⢀⣠⡄⠀⢀⣤⣾⣏⣀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠁⠀⣿⡟⠀⠀⠀⢀⣴⠟⠉⠀⣠⣾⣿⠟⠋⠉⠉⠉⠉⠉⠛⠛⠛⠿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣠⣶⠿⠛⠛⠿⢿⣿⡇⠀⢹⡇⠀⠀⢠⡾⠁⠀⣠⡾⠋⠉⠙⢷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠿⣷⣄⠀⠀⠀⠀⠀
⠀⠀⠀⣠⣴⡿⠋⠁⣀⣠⣤⣤⣤⣼⣷⡀⠈⣿⠀⢀⣾⠁⣀⣴⣿⣀⣀⡀⠀⠀⠻⣆⠀⠀⠀⠈⠉⣉⣷⠀⠀⠀⠀⠈⠻⣷⡄⠀⠀⠀
⠘⠿⢿⣯⡁⠀⠀⠈⠉⠁⠀⠀⠀⠉⢻⣷⣄⣹⣧⣼⣿⠟⠋⠉⠉⠉⠉⠙⠻⠶⠄⠹⣧⡀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠘⢿⣆⠀⠀
⠀⠀⠀⠙⠿⣶⣤⣄⣀⣀⣠⣤⣶⣶⡿⠋⠙⣿⠋⠉⠙⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⠀⠀⠀⠀⠀⠀⢤⡀⠀⠀⠀⠈⣿⣆⠀
⠀⠀⠀⠀⠀⢈⣽⡿⠋⠉⠉⠀⣸⠏⠀⠀⣰⠏⠀⠀⠀⢸⣇⠀⢀⣠⡴⠞⠛⠛⠛⠛⢶⣤⣸⡇⠀⠀⠀⠀⢀⣴⠇⠀⠀⠀⠀⠘⣿⡀
⠀⠀⠀⠀⢀⣾⠏⠀⠀⡄⠀⢀⡟⠀⠀⠀⣿⡀⠀⠀⠀⣸⡟⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡇
⠀⠀⠀⢠⣿⠋⠀⠀⡞⠀⡤⢸⡇⠀⠀⠀⠉⠀⠀⠀⣴⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧
⠀⠀⠀⣾⠇⠀⠀⠀⠙⠋⠀⠀⣿⠀⠀⠀⠀⠀⣠⡾⠃⠀⠀⠀⠀⠀⢰⣄⡶⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⡀⠀⠀⠀⢀⠀⠀⠀⠸⣿
⠀⠀⢸⡿⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⣀⣴⠟⠋⢠⡀⠀⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠲⠚⠁⠀⠈⠷⠞⠀⠀⠀⠀⣿
⠀⠀⣼⡇⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣾⠛⠁⠀⠀⠀⠓⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿
⠀⠀⣿⡇⠀⠀⢀⡀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡟
⠀⠀⣿⡇⠀⠀⢸⡤⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢤⠖⠀⠀⠀⠀⠀⣄⠀⣠⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡇
⠀⠀⢹⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢧⣀⡴⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠀⠀⠀⣄⡰⠀⠀⠀⣿⠃
⠀⠀⠘⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⣄⣠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⢠⣿⠀
⠀⠀⠀⢻⣧⠀⠀⢧⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⡦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡟⠀
⠀⠀⠀⠈⢿⣆⠀⠈⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠚⠁⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀⡄⢠⡄⠀⠀⣿⡇⠀
⠀⠀⠀⠀⠈⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣄⡆⠀⠀⠀⠀⠀⠀⠀⠒⠚⠁⠀⠀⠀⠀⠀⠙⠋⠀⠀⠀⣿⠀⠀
⠀⠀⠀⠀⠀⠀⠙⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠻⣷⣄⠀⢦⣀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣸⠆⠀⠀⠀⠀⠀⠀⢨⣿⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣷⣄⠀⠀⠀⠀⠀⢀⡀⠀⢲⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠀⢀⡀⠀⠀⠀⢸⣿⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢿⣦⣤⡀⠀⠀⠙⠦⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠄⠀⠀⠀⠀⠦⡼⠇⠀⠀⠀⣾⡏⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⢷⣦⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠲⠖⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⡟⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠛⠻⠿⠿⠿⠶⣶⣶⣶⣶⣤⣤⣄⣀⣀⠀⠀⠀⠀⠀⣀⣠⣴⡿⠋⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠛⠛⠛⠿⠟⠿⠛⠛⠛⠉⠀⠀⠀⠀⠀⠀
	
`

func Start(in io.Reader, out io.Writer) {
	scanner := bufio.NewScanner(in)

	io.WriteString(out, STRAWBERRY_ASCII_ART)

	for {
		fmt.Print(PROMPT)
		scanned := scanner.Scan()
		if !scanned {
			return
		}

		line := scanner.Text()
		l := lexer.New(line)
		p := parser.New(l)

		program := p.ParseProgram()
		if len(p.Errors()) != 0 {
			printParserErrors(out, p.Errors())
			continue
		}

		io.WriteString(out, program.String())
		io.WriteString(out, "\n")
	}
}

func printParserErrors(out io.Writer, errors []string) {
	io.WriteString(out, "Whoops! Something is not right!\n")
	io.WriteString(out, "parser error(s):\n")
	for _, msg := range errors {
		io.WriteString(out, "\t"+msg+"\n")
	}
}
